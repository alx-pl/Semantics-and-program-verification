{-

This file contains the grammar of TINY plus explanations how to render them
in BNFC.

-}

-- BNFC expressions that define the part of the grammar for boolean expressions
-- b ::= true | false | e1 ≤ e2 | ¬b | b1 ∧ b2

BAnd.  BExpr ::= BExpr "∧" BExpr1;
-- We can have multiple identifiers of operations with help of functions
band.  BExpr ::= BExpr "/\\" BExpr1;
BLeq.   BExpr1 ::= Expr "<=" Expr;
bleq.   BExpr1 ::= Expr "≤" Expr;
BNot.   BExpr1 ::= "~" BExpr1; -- Negation binds strongly
bnot.   BExpr1 ::= "¬" BExpr1; 
BTrue.  BExpr1 ::= "true"; -- We can define additional keywords
BFalse. BExpr1 ::= "false";

_.       BExpr1 ::= "(" BExpr ")";
_.       BExpr ::= BExpr1;

-- We define functions used above.
define band b1 b2 = BAnd b1 b2;
define bleq e1 e2 = BLeq e1 e2;
define bnot b1 = BNot b1;

-- BNFC expressions that define the part of the grammar for expressions
-- e ::= N | x | e1 + e2 | e1 ∗ e2 | e1 − e2

EPlus.   Expr  ::= Expr "+" Expr1;
EMinus.  Expr  ::= Expr "-" Expr1;

EMul.    Expr1 ::= Expr1 "*" Expr2; 
ENum.    Expr2 ::= Integer;
EVar.    Expr2 ::= Ident;

_.       Expr2 ::= "(" Expr ")"; -- We silently introduce parentheses 
_.       Expr1  ::= Expr2;       -- We silently make Expr1 and Expr2 equal
_.       Expr ::= Expr1;         -- We silently make Expr and Expr1 equal


-- BNFC expressions that define the part of the grammar for statements
-- S ::= x := e | skip | S1; S2 | if b then S1 else S2 | while b do S
